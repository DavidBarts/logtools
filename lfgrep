#! /usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (c) 2011 SEOmoz
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# I m p o r t s

import os, sys
import argparse, re
import LogParser

# V a r i a b l e s

MYNAME  = os.path.basename(sys.argv[0])

# F u n c t i o n s

def should_print_normal(entry, s):
    return s in entry

def should_print_invert(entry, s):
    return s not in entry

def should_print_regex_normal(entry, s):
    return re.search(s, entry) is not None

def should_print_regex_invert(entry, s):
    return re.search(s, entry) is None

def find_em(s, f):
    global IGNORE, should_print
    reader = LogParser.LogReader(f)

    while True:
        entry = reader.raw_next()
        if not entry:
            break
        if should_print(entry, s):
            sys.stdout.write(entry)

    reader.close()

# M a i n   P r o g r a m

# Parse arguments
parser = argparse.ArgumentParser(description='Find matching entries in a log file.', prog=MYNAME)
parser.add_argument('-v', '--invert-match', action='store_true', help='Print lines that DO NOT match.')
parser.add_argument('-r', '--regexp', action='store_true', help='Match a Python regular expression.')
parser.add_argument('search_string', nargs=1)
parser.add_argument('file', nargs='*')
opts = parser.parse_args()

if opts.regexp:
    should_print = should_print_regex_invert if opts.invert_match else should_print_regex_normal
else:
    should_print = should_print_invert if opts.invert_match else should_print_normal

if not opts.file:
    find_em(opts.search_string[0], sys.stdin)
else:
    for i in opts.file:
        find_em(opts.search_string[0], i)
