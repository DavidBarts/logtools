#! /usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (c) 2011 SEOmoz
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# I m p o r t s

import os, sys
import argparse
import LogParser

# V a r i a b l e s

MYNAME  = os.path.basename(sys.argv[0])

# F u n c t i o n s

def normal(entry, since, until):
    return entry.first.raw_time >= since and entry.first.raw_time < until

def inverted(entry, since, until):
    return not normal(entry, since, until)

def get_range(f):
    global should_print, opts
    reader = LogParser.LogReader(f)

    while True:
        entry = reader.next()
        if not entry:
            break
        if should_print(entry, opts.since[0], opts.until[0]):
            sys.stdout.write(entry.raw)
        if opts.short_circuit and entry.first.raw_time >= opts.until[0]:
            break

    reader.close()

# M a i n   P r o g r a m

# Parse arguments
parser = argparse.ArgumentParser(description='Find entries within a time range in a log file.', prog=MYNAME)
parser.add_argument('-v', '--invert-match', action='store_true', help='Print entries OUTSIDE OF range.')
parser.add_argument('-s', '--short-circuit', action='store_true', help='Assume each input file is sorted and exit as soon as range exceeded.')
parser.add_argument('since', nargs=1)
parser.add_argument('until', nargs=1)
parser.add_argument('file', nargs='*')
opts = parser.parse_args()

if opts.invert_match and opts.short_circuit:
    sys.stderr.write("%s: --invert-match and --short-circuit are mutually exclusive\n" % MYNAME)
    sys.exit(2)

should_print = inverted if opts.invert_match else normal

if not opts.file:
    get_range(sys.stdin)
else:
    for i in opts.file:
        get_range(i)
